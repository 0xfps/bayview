{"abi":[{"type":"function","name":"amountToBuyWithDepositAmount","inputs":[{"name":"_supply","type":"uint256","internalType":"uint256"},{"name":"_reserveBalance","type":"uint256","internalType":"uint256"},{"name":"_reserveWeight","type":"uint32","internalType":"uint32"},{"name":"_amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"amountToReceiveAfterTokenAmountSale","inputs":[{"name":"_supply","type":"uint256","internalType":"uint256"},{"name":"_reserveBalance","type":"uint256","internalType":"uint256"},{"name":"_reserveWeight","type":"uint32","internalType":"uint32"},{"name":"_amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"init","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"price","inputs":[{"name":"reserveBalance","type":"uint256","internalType":"uint256"},{"name":"totalSupply","type":"uint256","internalType":"uint256"},{"name":"reserveWeight","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"priceForAmountInReserveToken","inputs":[{"name":"_supply","type":"uint256","internalType":"uint256"},{"name":"_reserveBalance","type":"uint256","internalType":"uint256"},{"name":"_reserveWeight","type":"uint32","internalType":"uint32"},{"name":"_amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"amountToBuyWithDepositAmount(uint256,uint256,uint32,uint256)":"ce1662fd","amountToReceiveAfterTokenAmountSale(uint256,uint256,uint32,uint256)":"208ddb96","init()":"e1c7392a","price(uint256,uint256,uint32)":"303bc103","priceForAmountInReserveToken(uint256,uint256,uint32,uint256)":"e62ab5af"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reserveWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"amountToBuyWithDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reserveWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"amountToReceiveAfterTokenAmountSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"reserveWeight\",\"type\":\"uint32\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reserveWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"priceForAmountInReserveToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bancor <https://github.com/bancorprotocol>.\",\"kind\":\"dev\",\"methods\":{\"amountToBuyWithDepositAmount(uint256,uint256,uint32,uint256)\":{\"details\":\"Given a token supply, reserve balance, weight and a deposit amount (in the reserve token),       calculates the target amount for a given conversion (in the main token).       Formula:       return = _supply * ((1 + _amount / _reserveBalance) ^ (_reserveWeight / 1000000) - 1)\",\"params\":{\"_amount\":\"Amount of reserve tokens to get the target amount for.\",\"_reserveBalance\":\"Reserve balance.\",\"_reserveWeight\":\"Reserve weight, represented in ppm (1-1000000).\",\"_supply\":\"Liquid token supply.\"},\"returns\":{\"_0\":\"Amount of tokens that can be purchased.\"}},\"amountToReceiveAfterTokenAmountSale(uint256,uint256,uint32,uint256)\":{\"details\":\"Given a token supply, reserve balance, weight and a sell amount (in the main token),       calculates the target amount for a given conversion (in the reserve token).       Formula:       return = _reserveBalance * (1 - (1 - _amount / _supply) ^ (1000000 / _reserveWeight))\",\"params\":{\"_amount\":\"Amount of liquid tokens to get the target amount for.\",\"_reserveBalance\":\"Reserve balance.\",\"_reserveWeight\":\"Reserve weight, represented in ppm (1-1000000).\",\"_supply\":\"Liquid token supply.\"},\"returns\":{\"_0\":\"Reserve token amount.\"}},\"init()\":{\"details\":\"should be executed after construction (too large for the constructor)\"},\"priceForAmountInReserveToken(uint256,uint256,uint32,uint256)\":{\"details\":\"Given a token supply, reserve balance, weight and an amount (in the main token),       calculates the amount of reserve tokens required for purchasing the given amount       of pool tokens.       Formula:       return = _reserveBalance * ((_amount / _supply + 1) ^ (1000000 / _reserveWeight) - 1)\",\"params\":{\"_amount\":\"Requested amount of pool tokens.\",\"_reserveBalance\":\"Reserve balance.\",\"_reserveWeight\":\"Reserve weight, represented in ppm (1-1000000).\",\"_supply\":\"Liquid token supply.\"},\"returns\":{\"_0\":\"Reserve token amount.\"}}},\"title\":\"BancorBondingCurveMath.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Bancor bonding curve math, originally named `BancorFormula`, is a source code owned by Bancor Protocol, lifted from          https://github.com/bancorprotocol/contracts-solidity/blob/master/solidity/contracts/converter/BancorFormula.sol          with some minor alterations. The code used in this smart contract was copied from Slothman <https://github.com/slothman3878>          at https://github.com/slothman3878/bondingcurve/blob/main/contracts/BancorFormula/BancorFormula.sol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bancor/BancorBondingCurveMath.sol\":\"BancorBondingCurveMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@gelato/=lib/relay-context-contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@pyth/=lib/pyth-sdk-solidity/\",\":@uniswap/=lib/v3-periphery/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":relay-context-contracts/=lib/relay-context-contracts/contracts/\",\":v3-periphery/=lib/v3-periphery/contracts/\"]},\"sources\":{\"contracts/bancor/BancorBondingCurveMath.sol\":{\"keccak256\":\"0x631a4c37daa4194a6f63485d899a8956abe860b5a1ae55e22147a6ecc706e16f\",\"license\":\"Bancor LICENSE\",\"urls\":[\"bzz-raw://55fb11680cf804dfe134f7350ac95b4c4f157024210133ac4f260ce8b914d685\",\"dweb:/ipfs/Qmbc1bSrbqtS3FckdevEp8WwPZNewj4ULV5zcy2yHFhem8\"]},\"contracts/bancor/Power.sol\":{\"keccak256\":\"0x08a182f8e5c035745a780592011631402881ead1c1be9a0c9d61fd5b09676ff8\",\"license\":\"Bancor LICENSE\",\"urls\":[\"bzz-raw://f6cf5626147949dca31effcf90d3df350c828c4f24b9e9d4cda5039c1b37a97f\",\"dweb:/ipfs/QmfJsKYFWiJFT8p9scZfq9z4VHNrMBYEav76NbmhV94Qxk\"]},\"contracts/bancor/libraries/SafeMath.sol\":{\"keccak256\":\"0x32affe908af91062416c8714ebcb367c0c8d6f15d73fc0b9a8713639c09cb4d8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb7859e1bb07094a779212d095e0f9e8f9ed88f057e34397abb89c3c167b023b\",\"dweb:/ipfs/QmS2dZxTzvLJ8ZerKNRvyhJ7ufXGqbDVYDDkcvsQZpWxBr\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"_supply","type":"uint256"},{"internalType":"uint256","name":"_reserveBalance","type":"uint256"},{"internalType":"uint32","name":"_reserveWeight","type":"uint32"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"view","type":"function","name":"amountToBuyWithDepositAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_supply","type":"uint256"},{"internalType":"uint256","name":"_reserveBalance","type":"uint256"},{"internalType":"uint32","name":"_reserveWeight","type":"uint32"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"view","type":"function","name":"amountToReceiveAfterTokenAmountSale","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"init"},{"inputs":[{"internalType":"uint256","name":"reserveBalance","type":"uint256"},{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"uint32","name":"reserveWeight","type":"uint32"}],"stateMutability":"view","type":"function","name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_supply","type":"uint256"},{"internalType":"uint256","name":"_reserveBalance","type":"uint256"},{"internalType":"uint32","name":"_reserveWeight","type":"uint32"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"view","type":"function","name":"priceForAmountInReserveToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"amountToBuyWithDepositAmount(uint256,uint256,uint32,uint256)":{"details":"Given a token supply, reserve balance, weight and a deposit amount (in the reserve token),       calculates the target amount for a given conversion (in the main token).       Formula:       return = _supply * ((1 + _amount / _reserveBalance) ^ (_reserveWeight / 1000000) - 1)","params":{"_amount":"Amount of reserve tokens to get the target amount for.","_reserveBalance":"Reserve balance.","_reserveWeight":"Reserve weight, represented in ppm (1-1000000).","_supply":"Liquid token supply."},"returns":{"_0":"Amount of tokens that can be purchased."}},"amountToReceiveAfterTokenAmountSale(uint256,uint256,uint32,uint256)":{"details":"Given a token supply, reserve balance, weight and a sell amount (in the main token),       calculates the target amount for a given conversion (in the reserve token).       Formula:       return = _reserveBalance * (1 - (1 - _amount / _supply) ^ (1000000 / _reserveWeight))","params":{"_amount":"Amount of liquid tokens to get the target amount for.","_reserveBalance":"Reserve balance.","_reserveWeight":"Reserve weight, represented in ppm (1-1000000).","_supply":"Liquid token supply."},"returns":{"_0":"Reserve token amount."}},"init()":{"details":"should be executed after construction (too large for the constructor)"},"priceForAmountInReserveToken(uint256,uint256,uint32,uint256)":{"details":"Given a token supply, reserve balance, weight and an amount (in the main token),       calculates the amount of reserve tokens required for purchasing the given amount       of pool tokens.       Formula:       return = _reserveBalance * ((_amount / _supply + 1) ^ (1000000 / _reserveWeight) - 1)","params":{"_amount":"Requested amount of pool tokens.","_reserveBalance":"Reserve balance.","_reserveWeight":"Reserve weight, represented in ppm (1-1000000).","_supply":"Liquid token supply."},"returns":{"_0":"Reserve token amount."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@gelato/=lib/relay-context-contracts/","@openzeppelin/=lib/openzeppelin-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@pyth/=lib/pyth-sdk-solidity/","@uniswap/=lib/v3-periphery/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","hardhat/=node_modules/hardhat/","openzeppelin-contracts/=lib/openzeppelin-contracts/","pyth-sdk-solidity/=lib/pyth-sdk-solidity/","relay-context-contracts/=lib/relay-context-contracts/contracts/","v3-periphery/=lib/v3-periphery/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/bancor/BancorBondingCurveMath.sol":"BancorBondingCurveMath"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/bancor/BancorBondingCurveMath.sol":{"keccak256":"0x631a4c37daa4194a6f63485d899a8956abe860b5a1ae55e22147a6ecc706e16f","urls":["bzz-raw://55fb11680cf804dfe134f7350ac95b4c4f157024210133ac4f260ce8b914d685","dweb:/ipfs/Qmbc1bSrbqtS3FckdevEp8WwPZNewj4ULV5zcy2yHFhem8"],"license":"Bancor LICENSE"},"contracts/bancor/Power.sol":{"keccak256":"0x08a182f8e5c035745a780592011631402881ead1c1be9a0c9d61fd5b09676ff8","urls":["bzz-raw://f6cf5626147949dca31effcf90d3df350c828c4f24b9e9d4cda5039c1b37a97f","dweb:/ipfs/QmfJsKYFWiJFT8p9scZfq9z4VHNrMBYEav76NbmhV94Qxk"],"license":"Bancor LICENSE"},"contracts/bancor/libraries/SafeMath.sol":{"keccak256":"0x32affe908af91062416c8714ebcb367c0c8d6f15d73fc0b9a8713639c09cb4d8","urls":["bzz-raw://bb7859e1bb07094a779212d095e0f9e8f9ed88f057e34397abb89c3c167b023b","dweb:/ipfs/QmS2dZxTzvLJ8ZerKNRvyhJ7ufXGqbDVYDDkcvsQZpWxBr"],"license":"MIT"}},"version":1},"id":0}